<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>setcoder</title>
    <link>http://setcoder.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>求真 务实 严谨 细心</description>
    <pubDate>Tue, 24 Apr 2018 08:04:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ie不支持startsWith、endsWith</title>
      <link>http://setcoder.com/2018/04/24/ie%E4%B8%8D%E6%94%AF%E6%8C%81startsWith%E5%92%8CendsWith/</link>
      <guid>http://setcoder.com/2018/04/24/ie%E4%B8%8D%E6%94%AF%E6%8C%81startsWith%E5%92%8CendsWith/</guid>
      <pubDate>Tue, 24 Apr 2018 06:33:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一-概览&quot;&gt;&lt;a href=&quot;#一-概览&quot; class=&quot;headerlink&quot; title=&quot;一 概览&quot;&gt;&lt;/a&gt;一 概览&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;今天测试提了一个bug，告诉我某个页面在ie浏览器中出现了问题，借此我把这个问题和解决这个问题的方法
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一-概览"><a href="#一-概览" class="headerlink" title="一 概览"></a>一 概览</h3><p>&emsp;&emsp;今天测试提了一个bug，告诉我某个页面在ie浏览器中出现了问题，借此我把这个问题和解决这个问题的方法跟大家分享一下吧</p><h3 id="二-内容"><a href="#二-内容" class="headerlink" title="二 内容"></a>二 内容</h3><h5 id="1-问题是什么？"><a href="#1-问题是什么？" class="headerlink" title="1.问题是什么？"></a>1.问题是什么？</h5><p>&emsp;&emsp;经过调试脚本，问题的原因是ie不支持startsWith、endsWith，请看下图：<br><br><img src="/2018/04/24/ie不支持startsWith和endsWith/ie_endsWith.jpeg" title="ie中endsWith问题截图"> <br></p><p>&emsp;&emsp;我找到了mdn上关于startsWith的兼容性说明，见下图：<br><br><img src="/2018/04/24/ie不支持startsWith和endsWith/startsWith_intro.jpeg" title="兼容说明"></p><h5 id="2-正则处理"><a href="#2-正则处理" class="headerlink" title="2.正则处理"></a>2.正则处理</h5><p>&emsp;&emsp;利用正则可以很容易解决这个问题，见下图：<br><br><img src="/2018/04/24/ie不支持startsWith和endsWith/solution.jpeg" title="解决办法"></p>]]></content:encoded>
      
      <comments>http://setcoder.com/2018/04/24/ie%E4%B8%8D%E6%94%AF%E6%8C%81startsWith%E5%92%8CendsWith/#disqus_thread</comments>
    </item>
    
    <item>
      <title>原型与“继承”</title>
      <link>http://setcoder.com/2018/04/24/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E2%80%9C%E7%BB%A7%E6%89%BF%E2%80%9D/</link>
      <guid>http://setcoder.com/2018/04/24/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E2%80%9C%E7%BB%A7%E6%89%BF%E2%80%9D/</guid>
      <pubDate>Tue, 24 Apr 2018 02:25:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一-概览&quot;&gt;&lt;a href=&quot;#一-概览&quot; class=&quot;headerlink&quot; title=&quot;一 概览&quot;&gt;&lt;/a&gt;一 概览&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;说明一下，此篇文章是临时穿入的，后续的几篇文章我应该继续与大家分享关于计算机系统基础的相关知识，而此
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一-概览"><a href="#一-概览" class="headerlink" title="一 概览"></a>一 概览</h3><p>&emsp;&emsp;说明一下，此篇文章是临时穿入的，后续的几篇文章我应该继续与大家分享关于计算机系统基础的相关知识，而此篇文章是我通过阅读《JavaScript 高级程序设计》和《你不知道的JavaScript》中关于 <strong>继承</strong> 模块的一点心得。</p><h3 id="二-面向对象回顾"><a href="#二-面向对象回顾" class="headerlink" title="二 面向对象回顾"></a>二 面向对象回顾</h3><h4 id="1-面向类编程"><a href="#1-面向类编程" class="headerlink" title="1.面向类编程"></a>1.面向类编程</h4><p>&emsp;&emsp;你是否还记得大学里面刚学C++的时候关于面向对象的介绍呢，让我们一块来回顾一下吧。<br>&emsp;&emsp;类的 <strong>定义</strong>：在面向对象编程中，类是一种 <strong>代码组织结构形式</strong>，一种从真实世界到软件设计的建模方法。<br>&emsp;&emsp;类的 <strong>组织形式</strong>：面向对象或者面向类编程强调 <strong>数据</strong> 和 <strong>操作数据的行为</strong> 应该 <strong>封装</strong> 在一起,在正式计算机科学中我们称为 <strong>数据结构</strong>。</p><h4 id="2-类与23种高级设计模式"><a href="#2-类与23种高级设计模式" class="headerlink" title="2.类与23种高级设计模式"></a>2.类与23种高级设计模式</h4><p>&emsp;&emsp;类是面向对象的 <strong>底层设计模式</strong>，它是面向对象23种高级设计模式的 <strong>底层机制</strong>。<br>&emsp;&emsp;你或许还听说过 <strong>过程化编程</strong>,一种不借助高级抽象，仅仅由 <strong>过程（函数）调用</strong> 来组织代码的编程方式。程序语言中，Java只支持面向类编程，C/C++/Php既支持过程化编程，也支持面向类编程。</p><h4 id="3-类的机制"><a href="#3-类的机制" class="headerlink" title="3.类的机制"></a>3.类的机制</h4><p>&emsp;&emsp;在类的设计模式中，它为我们提供了 <strong>实例化</strong>、 <strong>继承</strong>、<strong>多态</strong> 3种机制。<br>&emsp;&emsp;<strong>构造器</strong>：类的实例由类的一种特殊方法构建，这个方法的名称通常与类名相同，称为 “构造器（constructor）”。这个方法的明确的工作，就是初始化实例所需的所有信息（状态）。<br>&emsp;&emsp;<strong>实例化</strong>：借助构造函数，由通用类到具体对象的过程。<br>&emsp;&emsp;<strong>继承</strong>：子类通过 <strong>拷贝</strong>（请一定要记住这个词）父类的属性和方法，从而使自己也能拥有这些属性与方法的过程。<br>&emsp;&emsp;<strong>多态</strong>：由继承产生的，子类重写从父类中继承的属性和方法，从而子类更加具体。</p><h4 id="4-类的继承"><a href="#4-类的继承" class="headerlink" title="4.类的继承"></a>4.类的继承</h4><p>（1）<strong>相对多态</strong>：任何方法都可以引用位于继承层级上更高一层的其他方法（同名或不同名）。我们说“相对”，因为我们不绝对定义我们想访问继承的哪一层（也就是类），而实质上在说“向上一层”来相对地引用。<br>（2）<strong>超类</strong>：在许多语言中，使用 <strong>super</strong> 关键字来引用 <strong>父类或祖先类</strong>。<br>（3）如果子类覆盖父类的某个方法，原版的方法和覆盖后的方法都是可以存在的，允许访问。<br>（4) 不要让多态搞糊涂，子类并不是链接到父类上，子类只是父类的一个副本，<strong>类继承的实质是拷贝行为</strong>。<br>（5）<strong>多重继承</strong>：子类的父类不止一个，<strong>JavaScript不支持多重继承</strong>。</p><h4 id="5-混入"><a href="#5-混入" class="headerlink" title="5.混入"></a>5.混入</h4><p> <strong>原理</strong>: 子构造函数混入父构造函数的属性和方法。<br> JavaScript的复合类型以 <strong>引用</strong> 的方式传递,不支持拷贝行为。<strong>混入（Mixin）</strong> 以 <strong>手动拷贝</strong> 的方式模拟继承的拷贝行为。</p><h4 id="明确混入："><a href="#明确混入：" class="headerlink" title="明确混入："></a>明确混入：</h4><p>（1）定义：显示的把一个对象的属性混入另一个对象。<br>（2）实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 另一种mixin，对覆盖不太“安全”</span><br><span class="line">function mixin( sourceObj, targetObj ) &#123;</span><br><span class="line">    for (var key in sourceObj) &#123;</span><br><span class="line">        targetObj[key] = sourceObj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return targetObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Vehicle = &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 首先，创建一个空对象</span><br><span class="line">// 将Vehicle的内容拷贝进去</span><br><span class="line">var Car = mixin( Vehicle, &#123; &#125; );</span><br><span class="line"></span><br><span class="line">// 现在拷贝Car的具体内容</span><br><span class="line">mixin( &#123;</span><br><span class="line">    wheels: 4,</span><br><span class="line"></span><br><span class="line">    drive: function() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, Car );</span><br></pre></td></tr></table></figure><p>（3）<strong>显示假想多态</strong>:Vehicle.drive.call(this)。因为ES6之前，JavaScript无法实现相对多态（inherit：drive()），所以我们明确地用名称指出Vehicle对象，然后在它上面调用drive()函数。<br>（4）<strong>问题</strong>：<br>&emsp;&emsp;A.技术上讲，函数没有被复制，只是复制了函数的引用；<br>&emsp;&emsp;B.在每一个需要建立 <strong>假想多态</strong> 引用的函数中都需要建立手动链接（Vehicle.drive.call(this)），维护成本高。可以尝试通过它实现 <strong>多重继承</strong>。<br>（5）<strong>结论</strong>：明确混入复杂、难懂、维护成本高，不推荐使用。</p><h4 id="寄生继承："><a href="#寄生继承：" class="headerlink" title="寄生继承："></a>寄生继承：</h4><p>（1）明确的mixin模式的一个变种，在某种意义上是明确的而在某种意义上是隐含的。<br>（2）实现如下：在构造函数中new一个对象，在这个对象上寄生扩展，最后将这个对象返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// “传统的JS类” `Vehicle`</span><br><span class="line">function Vehicle() &#123;</span><br><span class="line">    this.engines = 1;</span><br><span class="line">&#125;</span><br><span class="line">Vehicle.prototype.ignition = function() &#123;</span><br><span class="line">    console.log( &quot;Turning on my engine.&quot; );</span><br><span class="line">&#125;;</span><br><span class="line">Vehicle.prototype.drive = function() &#123;</span><br><span class="line">    this.ignition();</span><br><span class="line">    console.log( &quot;Steering and moving forward!&quot; );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// “寄生类” `Car`</span><br><span class="line">function Car() &#123;</span><br><span class="line">    // 首先, `car`是一个`Vehicle`</span><br><span class="line">    var car = new Vehicle();</span><br><span class="line"></span><br><span class="line">    // 现在, 我们修改`car`使它特化</span><br><span class="line">    car.wheels = 4;</span><br><span class="line"></span><br><span class="line">    // 保存一个`Vehicle::drive()`的引用</span><br><span class="line">    var vehDrive = car.drive;</span><br><span class="line"></span><br><span class="line">    // 覆盖 `Vehicle::drive()`</span><br><span class="line">    car.drive = function() &#123;</span><br><span class="line">        vehDrive.call( this );</span><br><span class="line">        console.log( &quot;Rolling on all &quot; + this.wheels + &quot; wheels!&quot; );</span><br><span class="line">    &#125;;</span><br><span class="line">    return car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var myCar = new Car();</span><br><span class="line"></span><br><span class="line">myCar.drive();</span><br><span class="line">// Turning on my engine.</span><br><span class="line">// Steering and moving forward!</span><br><span class="line">// Rolling on all 4 wheels!</span><br></pre></td></tr></table></figure></p><p>（3）问题：子函数的初始化创建对象丢失，改变了this绑定，不过不用new去直接创建。</p><h4 id="隐式混入"><a href="#隐式混入" class="headerlink" title="隐式混入"></a>隐式混入</h4><p>（1）定义：父、子构造函数在原有构造函数与属性、方法之间，添加一层函数，子构造函数中间函数的this绑定到父构造函数中间函数<br>（2）实现原理：利用了this的二次绑定。<br>（3) 实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var Something = &#123;</span><br><span class="line">    cool: function() &#123;</span><br><span class="line">        this.greeting = &quot;Hello World&quot;;</span><br><span class="line">        this.count = this.count ? this.count + 1 : 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Something.cool();</span><br><span class="line">Something.greeting; // &quot;Hello World&quot;</span><br><span class="line">Something.count; // 1</span><br><span class="line"></span><br><span class="line">var Another = &#123;</span><br><span class="line">    cool: function() &#123;</span><br><span class="line">        // 隐式地将`Something`混入`Another`</span><br><span class="line">        Something.cool.call( this );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Another.cool();</span><br><span class="line">Another.greeting; // &quot;Hello World&quot;</span><br><span class="line">Another.count; // 1 (不会和`Something`共享状态)</span><br></pre></td></tr></table></figure></p><p>(4) 问题：单纯的利用this的二次绑定，不能实现相对应用。<br>(5) 结论：谨慎使用。</p><h3 id="三-原型"><a href="#三-原型" class="headerlink" title="三 原型"></a>三 原型</h3><h4 id="1-prototype"><a href="#1-prototype" class="headerlink" title="1 prototype"></a>1 prototype</h4><p><strong>prototype 定义</strong>：JavaScript中每个对象都拥有一个prototype属性，它只是一个 <strong>其他对象的引用</strong>。几乎所有的对象在被创建时，它的这个属性都被赋予了一个 <strong>非null</strong> 值。</p><p><strong>Object.create()</strong>: 它创建一个对象，这个对象带有一个链接到指定对象的 <strong>[prototype]链接</strong>，见代码截图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var anotherObject = &#123;</span><br><span class="line">   a: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 创建一个链接到`anotherObject`的对象</span><br><span class="line">var myObject = Object.create( anotherObject );</span><br><span class="line"></span><br><span class="line">myObject.a; // 2</span><br></pre></td></tr></table></figure><h4 id="2-类"><a href="#2-类" class="headerlink" title="2 类"></a>2 类</h4><h4 id="“类”函数"><a href="#“类”函数" class="headerlink" title="“类”函数"></a>“类”函数</h4><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = new Foo();</span><br><span class="line"></span><br><span class="line">Object.getPrototypeOf( a ) === Foo.prototype; // true</span><br></pre></td></tr></table></figure><p><strong>结论</strong>: 当通过调用new Foo()创建实例对象时，实例对象会被链接到<strong>Foo.prototype</strong>指向的对象。</p><h4 id="拷贝与链接"><a href="#拷贝与链接" class="headerlink" title="拷贝与链接"></a>拷贝与链接</h4><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.fruit = [&apos;apple&apos;];</span><br><span class="line"></span><br><span class="line">// foo1的[prototype]链接到了 Foo.prototype</span><br><span class="line">var foo1 = new Foo();</span><br><span class="line">foo1.fruit.push(&apos;banana&apos;);</span><br><span class="line"></span><br><span class="line">// foo2的[prototype]也被链接到了 Foo.prototype</span><br><span class="line">var foo2 = new Foo();</span><br><span class="line">foo2.fruit // [apple, banana]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在面向类的语言中，可以创造一个类的多个拷贝。在JavaScript中，我们不能创造一个类的多个实例，可以创建多个对象，它们的[prototype]链接指向一个共同对象。但默认地，没有拷贝发生，如此这些对象彼此间最终不会完全分离和切断关系，而是 链接在一起。</p><p>&emsp;&emsp;“继承”意味着 拷贝 操作，而JavaScript不拷贝对象属性（原生上，默认地）。相反，JS在两个对象间建立链接，一个对象实质上可以将对属性/函数的访问 委托 到另一个对象上。对于描述JavaScript对象链接机制来说，“委托”是一个准确得多的术语。</p><h4 id="new调用和普通调用近似相同"><a href="#new调用和普通调用近似相同" class="headerlink" title="new调用和普通调用近似相同"></a>new调用和普通调用近似相同</h4><p>&emsp;&emsp;JavaScript中，new在某种意义上劫持了普通函数，并将它以另一种函数调用：构建一个对象，外加调用这个函数所做的任何事。</p><h4 id="实例对象没有constructor属性"><a href="#实例对象没有constructor属性" class="headerlink" title="实例对象没有constructor属性"></a>实例对象没有constructor属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123; &#125;</span><br><span class="line"></span><br><span class="line">var foo1 = new Foo();</span><br><span class="line"></span><br><span class="line">foo1.constructor === Foo  // true</span><br><span class="line"></span><br><span class="line">// 修改Foo.prototype指向的对象</span><br><span class="line">Foo.prototype = &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo2 = new Foo();</span><br><span class="line"></span><br><span class="line">foo2.constructor === Foo  // false</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;a.constructor === Foo为true意味着a上实际拥有一个.constructor属性，指向Foo？<strong>不对</strong>。<br>&emsp;&emsp;实际上，.constructor引用也 <strong>委托</strong> 到了Foo.prototype，它 恰好 有一个指向Foo的默认属性。</p><h4 id="3-“原型继承”"><a href="#3-“原型继承”" class="headerlink" title="3 “原型继承”"></a>3 “原型继承”</h4><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Foo(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.myName = function() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Bar(name,label) &#123;</span><br><span class="line">    // 构造函数内部相对多态</span><br><span class="line">    Foo.call( this, name );</span><br><span class="line">    this.label = label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这里，我们创建一个新的`Bar.prototype`链接链到`Foo.prototype`</span><br><span class="line">Bar.prototype = Object.create( Foo.prototype );</span><br><span class="line"></span><br><span class="line">// 注意！现在`Bar.prototype.constructor`不存在了，</span><br><span class="line">// 如果你有依赖这个属性的习惯的话，可以被手动“修复”。</span><br><span class="line">Bar.prototype.myLabel = function() &#123;</span><br><span class="line">    return this.label;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var a = new Bar( &quot;a&quot;, &quot;obj a&quot; );</span><br><span class="line"></span><br><span class="line">a.myName(); // &quot;a&quot;</span><br><span class="line">a.myLabel(); // &quot;obj a&quot;</span><br></pre></td></tr></table></figure><p><strong>核心代码分析</strong>：<br>代码1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Bar(para1, para2) &#123;</span><br><span class="line">   Foo.call(this, para1);</span><br><span class="line">   //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码1分析：<strong>构造函数内部初始化</strong>，利用this绑定，根据父构造函数初始化子构造函数内部。</p><p>代码2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bar.prototype = Object.create(Foo.prototype)</span><br></pre></td></tr></table></figure><p>代码2分析：<strong>原型初始化</strong>，将子构造函数的[prototype]链接到父构造函数的[prototype]链接的对象。</p><p><strong>误区</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bar.prototype = Foo.prototype</span><br></pre></td></tr></table></figure><p>这种方法是错误的，子构造函数会污染到父构造函数</p><p><strong>ES6 新方法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.setPrototypeOf(Bar.prototype, Foo.prototype)</span><br></pre></td></tr></table></figure><h4 id="“自身”"><a href="#“自身”" class="headerlink" title="“自身”"></a>“自身”</h4><p>&emsp;&emsp;面向类语言中，根据实例对象查找创建它的类模板，称为自省（或反射）。JavaScript中，如何根据实例对象，查找它的委托链接呢？</p><p><strong>1 instanceOf</strong>:</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = new Foo();</span><br><span class="line"></span><br><span class="line">a instanceOf Foo  // true</span><br></pre></td></tr></table></figure><p>代码分析：<br>a: instanceOf <strong>机制</strong>，在实例对象（a）的原型链中，是否有Foo.prototype；<br>b: 需要用于可检测的构造函数（Foo）;<br>c: 无法判断实例对象间（比如a，b）是否通过[prototype]链相互关联。</p><p><strong>2 isPrototypeOf [[prototype]]反射</strong>：</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = new Foo();</span><br><span class="line"></span><br><span class="line">Foo.prototype.isPrototypeOf(a);  // true</span><br><span class="line"></span><br><span class="line">// 对象b是否在a的[[prototype]]链出现过</span><br><span class="line">b.isPrototypeOf(a);</span><br></pre></td></tr></table></figure><p><strong>代码分析</strong>：<br>a：在实例对象（a）的原型链中，是否有Foo.prototype；<br>b：需要用于可检测的构造函数（Foo）；<br>c：<strong>可以</strong>判断对象间是否通过[prototype]链相互关联。</p><p><strong>3 getPrototypeOf 获取原型链</strong>：</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = new Foo();</span><br><span class="line"></span><br><span class="line">Object.getPrototypeOf(a)  // 查看constructor属性</span><br></pre></td></tr></table></figure><p><strong>4 <strong>proto</strong></strong>：</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = new Foo();</span><br><span class="line"></span><br><span class="line">a.__proto__ === Foo.prototype  // true</span><br></pre></td></tr></table></figure><p>代码分析：<br>a：<strong>proto</strong>属性在ES6被标准化；<br>b：<strong>proto</strong>属性跟 <strong>constructor</strong>属性类似，它不存在实例对象中。constructor属性存在于 <strong>原型链</strong>中,<strong>proto</strong>存在于Object.prototype中。<br>c：<strong>proto</strong>看起来像一个属性，但实际上将它看做是一个getter/setter更合适。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty( Object.prototype, &quot;__proto__&quot;, &#123;</span><br><span class="line">    get: function() &#123;</span><br><span class="line">        return Object.getPrototypeOf( this );</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function(o) &#123;</span><br><span class="line">        // setPrototypeOf(..) as of ES6</span><br><span class="line">        Object.setPrototypeOf( this, o );</span><br><span class="line">        return o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong>：<br></p>]]></content:encoded>
      
      <comments>http://setcoder.com/2018/04/24/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E2%80%9C%E7%BB%A7%E6%89%BF%E2%80%9D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机系统之程序被其它程序翻译成不同的格式</title>
      <link>http://setcoder.com/2018/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%A8%8B%E5%BA%8F%E8%A2%AB%E5%85%B6%E5%AE%83%E7%A8%8B%E5%BA%8F%E7%BF%BB%E8%AF%91%E6%88%90%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A0%BC%E5%BC%8F/</link>
      <guid>http://setcoder.com/2018/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%A8%8B%E5%BA%8F%E8%A2%AB%E5%85%B6%E5%AE%83%E7%A8%8B%E5%BA%8F%E7%BF%BB%E8%AF%91%E6%88%90%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A0%BC%E5%BC%8F/</guid>
      <pubDate>Sun, 22 Apr 2018 11:04:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一-概览&quot;&gt;&lt;a href=&quot;#一-概览&quot; class=&quot;headerlink&quot; title=&quot;一 概览&quot;&gt;&lt;/a&gt;一 概览&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;上一篇博客中，我们解释了计算机系统中的信息是由位序列和位序列所处的上下文所决定。而本篇博客主要是解释
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一-概览"><a href="#一-概览" class="headerlink" title="一 概览"></a>一 概览</h3><p>&emsp;&emsp;上一篇博客中，我们解释了计算机系统中的信息是由位序列和位序列所处的上下文所决定。而本篇博客主要是解释源程序是怎么被执行的。</p><h3 id="二-内容"><a href="#二-内容" class="headerlink" title="二 内容"></a>二 内容</h3><p>&emsp;&emsp;经典的helloWorld程序是从C语言程序开始的，因为这种形式能够被人读懂。然后，它能直接被计算机识别并执行吗？相信你肯定知道答案是否定的，那么就让我们来看看源程序经历了哪些步骤，最终成为了什么才会让计算机去执行它。</p><p>&emsp;&emsp;为了在系统中运行helloWorld程序，每条C语句都必须被其他程序转化为一系列的低级机器语言指令。然后这些指令按照一种称为 <strong>可执行目标程序</strong> 的格式打好包，并以二进制磁盘文件的形式存放起来。目标程序也被称为 <strong>可执行目标文件</strong>。</p><p>&emsp;&emsp;在Unix系统上，从源程序到目标文件的转化是由 <strong>编译器驱动程序</strong> 完成的。</p><p>&emsp;&emsp;源程序到目标程序经历了 <strong>四</strong> 个阶段,执行这四个阶段（预处理器、编译器、汇编器和链接器）的程序一起构成了 <strong>编译系统</strong>。</p>]]></content:encoded>
      
      <comments>http://setcoder.com/2018/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%A8%8B%E5%BA%8F%E8%A2%AB%E5%85%B6%E5%AE%83%E7%A8%8B%E5%BA%8F%E7%BF%BB%E8%AF%91%E6%88%90%E4%B8%8D%E5%90%8C%E7%9A%84%E6%A0%BC%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机系统之信息就是位加上下文</title>
      <link>http://setcoder.com/2018/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%B0%B1%E6%98%AF%E4%BD%8D%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <guid>http://setcoder.com/2018/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%B0%B1%E6%98%AF%E4%BD%8D%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <pubDate>Sun, 22 Apr 2018 09:53:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一-概览&quot;&gt;&lt;a href=&quot;#一-概览&quot; class=&quot;headerlink&quot; title=&quot;一 概览&quot;&gt;&lt;/a&gt;一 概览&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;写这篇博客之前，我先推荐一本书-《深入理解计算机系统》给大家吧，这本书是由卡内基-梅隆大学的布莱恩特
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一-概览"><a href="#一-概览" class="headerlink" title="一 概览"></a>一 概览</h3><p>&emsp;&emsp;写这篇博客之前，我先推荐一本书-《深入理解计算机系统》给大家吧，这本书是由卡内基-梅隆大学的布莱恩特教授和奥哈拉伦教授所写，由中科院院士梅宏教授和上海交通大学软件学院院长臧赋宇教授作序，它的主要读者是计算机科学家、计算机工程师。这本书的目的是解释所有 <strong>计算机系统的本质概念</strong>。</p><h3 id="二-内容"><a href="#二-内容" class="headerlink" title="二 内容"></a>二 内容</h3><p>&emsp;&emsp;我们经常能听到源程序的概念，那么源程序（也称源文件）是什么呢？源程序实际上就是一个由值0和1组成的 <strong>位（又称为比特）序列</strong>,8个位被组织成一组，称为字节。每个字节表示程序中的某些文本字符。大部分的现代计算机系统都使用ASCII标准表示文本字符。<br>&emsp;&emsp;源程序的表示方法说明了一个基本思想：系统中所有的信息-包括磁盘文件、内存中的程序、内存中存放的用户数据以及网络上传送的数据，都是由一串比特表示的。区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。比如，在不同的上下文中，一个同样的字节序列可能表示一个整数、浮点数、字符串或者机器指令。</p>]]></content:encoded>
      
      <comments>http://setcoder.com/2018/04/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E4%BF%A1%E6%81%AF%E5%B0%B1%E6%98%AF%E4%BD%8D%E5%8A%A0%E4%B8%8A%E4%B8%8B%E6%96%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>setcoder简介</title>
      <link>http://setcoder.com/2018/04/22/setcoder%E7%AE%80%E4%BB%8B/</link>
      <guid>http://setcoder.com/2018/04/22/setcoder%E7%AE%80%E4%BB%8B/</guid>
      <pubDate>Sun, 22 Apr 2018 04:39:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一-定义&quot;&gt;&lt;a href=&quot;#一-定义&quot; class=&quot;headerlink&quot; title=&quot;一 定义&quot;&gt;&lt;/a&gt;一 定义&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;setcoder是一个由多人共同写作的博客平台。目前已经拥有11名成员，其中包含10名在职工程师（J
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一-定义"><a href="#一-定义" class="headerlink" title="一 定义"></a>一 定义</h3><p>&emsp;&emsp;setcoder是一个由多人共同写作的博客平台。目前已经拥有11名成员，其中包含10名在职工程师（Java、JavaScript、Android、Python等方向）、1名在校研究生。<br></p><h3 id="二-setcoder由来"><a href="#二-setcoder由来" class="headerlink" title="二 setcoder由来"></a>二 setcoder由来</h3><p>&emsp;&emsp;我们选取了柯林斯高阶英汉词典中 <strong>set</strong> 的一个名词的释义， <strong>“(经常碰面或趣味相同的)一伙(或一帮、一群)人”</strong> , <strong>coder</strong> 顾名思义就是 <strong>“编程者”</strong>，这是 <strong>setcoder</strong> 的由来，<strong>“一伙志同道合的程序员”</strong>。</p><h3 id="三-写作特点"><a href="#三-写作特点" class="headerlink" title="三 写作特点"></a>三 写作特点</h3><p>&emsp;&emsp;<strong>求真</strong>、<strong>严谨</strong>、<strong>简洁</strong>、<strong>细心</strong>。<br>&emsp;&emsp;我们务必让每一篇文章的内容与语言规范的定义保持高度的一致性，这既是写博客的一致性原则，也是对读者的一种责任态度。我们要求文章的语法格式严谨，语句通顺，避免出现语法上的错误。文章的内容力求简洁，它或是一篇长篇大论，亦或是编程语言上一个很小的点，这无论是对写作的人，还是阅读的人来说都将是福音。细心是每一位博客作者都应关注的点，写博客有时候会出现错别字、配图错误、代码错误，请读者谅解，我们尽量去规避这些错误，同时我们将深深感激那些在评论中告诉我们的读者。</p>]]></content:encoded>
      
      <comments>http://setcoder.com/2018/04/22/setcoder%E7%AE%80%E4%BB%8B/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
